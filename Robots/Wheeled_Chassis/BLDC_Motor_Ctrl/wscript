#!/usr/bin/env python3
# encoding: utf-8

'''
@author: Milos Subotic <milos.subotic.sm@gmail.com>
@license: MIT
'''

###############################################################################

from common_waf import *
import avrwaf
import avrwaf.arduino

import os

###############################################################################

def prerequisites(ctx):
	ctx.load('arduino', tooldir = avrwaf.location)

def options(opt):
	opt.load('c cxx')
	# Common options.
	opt.add_option(
		'--app',
		dest = 'app',
		default = None,
		help = 'App to be uploaded to MCU'
	)
	opt.add_option(
		'--port',
		dest = 'port',
		default = '0',
		help = 'Programmer port number or full file name i.e. dev file ' +
			'(2, /dev/ttyUSB2, COM2)'
	)
	opt.add_option(
		'--addr',
		dest = 'addr',
		default = None,
		help = 'Address of slave which we want to programm in chain ' +
			'(2 for motor 0, and so on)'
	)
	
	# Need it because flash_bootloader
	opt.add_option(
		'--programmer',
		dest = 'programmer',
		default = None, # Let arduino set up its programmer.
		help = 'Programmer for avrdude: ' + \
			'[usbasp|arduino_as_isp]'
	)

def configure(cfg):
	cfg.env.ARDUINO_BOARD = 'Arduino Uno'
	if cfg.options.port:
		cfg.env.PROGRAMMER_PORT = expand_port(cfg.options.port)
	
	cfg.env.ARDUINO_LIBS = ['SoftwareSerial']
	
	cfg.env.OPT = '-Os'
	# Tools.
	cfg.load('arduino', tooldir = avrwaf.location)
	cfg.load('avr', tooldir = avrwaf.location)
	cfg.load('avrdude', tooldir = avrwaf.location)


def build(bld):
	# Build Arduino_Core.
	avrwaf.arduino.build(bld)

	for code_file in glob_apps_srcs(bld):
		name = os.path.splitext(code_file)[0]
		bld.program(
			target = name + '.elf',
			features = 'avr-hex',
			use = 'Arduino_Core',
			source = [code_file]
		)
		#TODO Move to feature.
		bld(
			rule = '"${OBJDUMP}" -S "${SRC}" > "${TGT[0]}"',
			target = name + '.lst',
			source = name + '.elf'
		)


###############################################################################
#TODO Maybe if something could to avrwaf

@after_cmd(build)
@build_context
def size(ctx):
	'''Size of firmware choosed by --app=<NAME> or all'''
	if ctx.options.app:
		a = expand_app(ctx.options.app)
		ctx(
			features = 'avr_size',
			source = 'build/' + a + '.elf'
		)

@build_context
def reset(ctx):
	'''Reset MCU'''
	ctx(features = 'avrdude_read_fuses')


@build_context
def flash_bootloader(ctx):
	if ctx.options.programmer:
		ctx.env.PROGRAMMER = ctx.options.programmer
	if ctx.options.port:
		ctx.env.PROGRAMMER_PORT = expand_port(ctx.options.port)
	
	ctx.env.LFUSE = 0xFF
	ctx.env.HFUSE = 0xDE
	ctx.env.EFUSE = 0xFD
	ctx.env.LOCK = 0x3F
	ctx(
		features = 'avrdude_write_fuses',
		erase_chip = True
	)
	
	ctx(
		features = 'avrdude_upload',
		source = ctx.srcnode.find_node('optiboot_atmega328.hex'),
		LOCK = 0x0F # Cannot write or read from bootloader.
	)



def common_upload(ctx, verify_only):
	if ctx.options.port:
		ctx.env.PROGRAMMER_PORT = expand_port(ctx.options.port)
	if ctx.options.app:
		a = expand_app(ctx.options.app)
		ctx(
			features = 'avrdude_upload',
			source = a + '.hex',
			verify_only = verify_only
		)
@after_cmd(build)
@build_context
def upload(ctx):
	'''Upload firmware <NAME>.hex to MCU choosed by --app=<NAME>'''
	common_upload(ctx, False)
@after_cmd(build)
@build_context
def verify(ctx):
	common_upload(ctx, True)

def common_upload_in_chain(ctx, verify_only):
	'''Upload firmware <NAME>.hex to MCU choosed by --app=<NAME>'''
	if ctx.options.port:
		ctx.env.PROGRAMMER_PORT = expand_port(ctx.options.port)
	if ctx.options.app:
		dev_fn = ctx.env.PROGRAMMER_PORT
		
		if ctx.options.addr == None:
			ctx.fatal('No addr defined!')
		
		addr = int(ctx.options.addr)
		
		pre_cmd = '{} {} {}'.format('${go_prog_mode}', dev_fn, addr)
		post_cmd = '{} {}'.format('${rst_chain}', dev_fn)
		
		a = expand_app(ctx.options.app)
		
		ctx(
			features = 'pre_avrdude_upload',
			cmd = pre_cmd
		)
		ctx(
			features = 'avrdude_upload',
			source = a + '.hex',
			# Ignore error, bcs need to reset after it.
			ignore_error = True,
			verify_only = verify_only
		)
		ctx(
			features = 'post_avrdude_upload',
			cmd = post_cmd
		)
@after_cmd(build)
@build_context
def upload_in_chain(ctx):
	common_upload_in_chain(ctx, False)
	
@after_cmd(build)
@build_context
def verify_in_chain(ctx):
	common_upload_in_chain(ctx, True)


@build_context
def rst_chain(ctx):
	if ctx.options.port:
		ctx.env.PROGRAMMER_PORT = expand_port(ctx.options.port)
	ctx.exec_command2('${rst_chain} ${PROGRAMMER_PORT}')
	
@build_context
def ls_chain_nodes(ctx):
	ctx.exec_command2('${ls_chain_nodes}')
	
def debug_uart(ctx):
	if ctx.options.port:
		p = expand_port(ctx.options.port)
		ctx.exec_command2('picocom -b 115200 {}'.format(p))

###############################################################################
