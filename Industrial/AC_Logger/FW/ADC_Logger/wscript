#!/usr/bin/env python3
# encoding: utf-8

'''
@author: Milos Subotic <milos.subotic.sm@gmail.com>
@license: MIT
'''

###############################################################################

import avrwaf
from avrwaf import build_context, after_cmd

from os.path import join

import os
import glob

import waflib
import re

###############################################################################

one_file_fws = [
	'01_adc_logger_slow.cpp',
	'10_adc_cycle.cpp',
]


def prerequisites(ctx):
	ctx.exec_command2('apt -y install gcc-avr avr-libc avrdude')
	#with open('/etc/udev/rules.d/50-avrdragon.rules', 'w') as f:
	#	f.write('SUBSYSTEM=="usb", ATTR{idVendor}=="03eb", ATTR{idProduct}=="2107", MODE="0660", GROUP="plugdev"')
	#ctx.exec_command('/etc/init.d/udev restart')

def options(opt):
	opt.load('c cxx')
	# Common options.
	#TODO Maybe also move to avrwaf
	opt.add_option(
		'--mcu',
		dest = 'mcu',
		default = None,
		help = 'MCU (part) for avrdude'
	)
	opt.add_option(
		'--freq',
		dest = 'freq',
		default = None,
		help = 'Working frequency MCU'
	)
	opt.add_option(
		'--programmer',
		dest = 'programmer',
		default = None,
		help = 'Programmer/PROGRAMMER for avrdude: ' + \
			'[dragon_jtag|dragon_isp|usbasp|arduino]'
	)
	opt.add_option(
		'--programmer-speed',
		dest = 'programmer_speed',
		default = None,
		help = 'Programmer speed for avrdude'
	)
	
	opt.add_option(
		'--app',
		dest = 'app',
		default = None,
		help = 'App to be uploaded to MCU'
	)
	opt.add_option(
		'--port',
		dest = 'port',
		default = None,
		help = 'Programmer port i.e. dev file (like /dev/ttyUSB)'
	)
	
	# Project specific.
	opt.add_option(
		'--wavgat',
		dest = 'wavgat',
		action = 'store_true',
		default = False,
		help = 'WAVGAT version of Arduino'
	)

def configure(cfg):
	if cfg.options.wavgat:
		cfg.env.ARDUINO_BOARD = 'WAVGAT UNO R3'
	else:
		cfg.env.ARDUINO_BOARD = 'Arduino Uno'
	if cfg.options.port:
		cfg.env.PROGRAMMER_PORT = cfg.options.port
	
	cfg.env.OPT = '-Os'
	# Tools.
	cfg.load('arduino', tooldir = avrwaf.location)
	cfg.load('avr', tooldir = avrwaf.location)
	cfg.load('avrdude', tooldir = avrwaf.location)



def build(bld):
	ard_src = bld.root.find_node(bld.env.ARDUINO_CORE)
	ard_inc = [
		bld.env.ARDUINO_CORE,
		bld.env.ARDUINO_VARIANT
	]
	bld.stlib(
		target = 'Arduino_Core',
		source = ard_src.ant_glob('*.c') + ard_src.ant_glob('*.cpp'),
		includes = ard_inc,
		export_includes = ard_inc
	)
	
	for code_file in one_file_fws:
		name = os.path.splitext(code_file)[0]
		bld.program(
			target = name + '.elf',
			features = 'avr-hex',
			use = 'Arduino_Core',
			source = [code_file]
		)
		#TODO Move to feature.
		bld(
			rule = '"${OBJDUMP}" -S "${SRC}" > "${TGT[0]}"',
			target = name + '.asm',
			source = name + '.elf'
		)

def expand_app(app):
	sufixes = ['', '.exe', '.elf']
	prefixes = ['', 'app_', 'example_', 'test_']
	
	programs = []
	for g in glob.glob('build/*'):
		if os.path.isfile(g):
			b= os.path.split(g)[1]
			root, ext = os.path.splitext(b)
			if ext in sufixes:
				programs.append(b)
	
	possible_a = []
	for p in programs:
		for prefix in prefixes:
			if p.startswith(prefix + app):
				#a = p
				a, _ = os.path.splitext(p) # Split elf for AVR
				possible_a.append(a)
	possible_a.sort()
	
	if len(possible_a) == 0 or app in possible_a:
		a = app
	else:
		a = possible_a[0]
		
	return a
	
@after_cmd(build)
@build_context
def size(ctx):
	'''Size of firmware choosed by --app=<NAME> or all'''
	if ctx.options.app:
		a = expand_app(ctx.options.app)
		ctx(
			features = 'avr_size',
			source = 'build/' + a + '.elf'
		)

@build_context
def reset(ctx):
	'''Reset MCU'''
	ctx(features = 'avrdude_read_fuses')
	
@build_context
def read_fuses(ctx):
	'''Read fuses from MCU'''
	ctx(features = 'avrdude_read_fuses')

@build_context
def write_fuses(ctx):
	'''Write configured fuses from MCU'''
	ctx(features = 'avrdude_write_fuses')

@after_cmd(build)
@build_context
def upload(ctx):
	'''Upload firmware <NAME>.hex to MCU choosed by --app=<NAME>'''
	if ctx.options.port:
		ctx.env.PROGRAMMER_PORT = ctx.options.port
	if ctx.options.app:
		a = expand_app(ctx.options.app)
		ctx(
			features = 'avrdude_upload',
			source = a + '.hex'
		)

###############################################################################
